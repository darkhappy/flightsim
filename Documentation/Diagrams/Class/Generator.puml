@startuml Generator

skinparam linetype polyline

package Models {
    ' ----------------------------------- '
    ' -- Enum                          -- '
    ' Red = Rescue
    ' Yellow = Fires
    ' Blue = Cargo
    ' Green = Passenger
    ' Gray = Observer
    enum Colour {
        RED
        YELLOW
        BLUE
        GREEN
        GRAY
    }
    
    enum AirplaneType {
        PASSENGER
        CARGO
        FIRE
        RESCUE
        SCOUT
    }

    class Position {
        - _x: int
        - _y: int
        + Position(int x, int y)
        + Position(string longitude, string latitude)
        + {static} Transpose(int x, int y): string
        + {static} Transpose(string): Tuple<int, int>
        + ToString(): string
    }

    class Scenario {
        - _airports: AirportList
        + AddAirport(string[] data): void
        + EditAirport(string id, string[] data): void
        + DeleteAirport(string id): void
        + AddAirplane(string id, string[] data): void
        + EditAirplane(string id, string[] data): void
        + DeleteAirplane(string id): void
        + ToString(): string
    }
    
    ' -----------------------------------'
    ' -- Airport Management           -- '
    'package "Airplanes and Airports" {
        class Airport {
            - _id: string
            - _name: string
            - _location: Position
            - _airplanes: List<Airplane>
            - _passengerTraffic: int
            - _merchandiseTraffic: double
            - _passenger: int
            - _merchandise: double
            + Export(): string[]
            + Action(int time): void
        }
    
    ' -----------------------------------'
    ' -- Airplane Management          -- '
        class AirplaneFactory << (S,orange) Singleton>> {
            - {static} _airplaneFactory: AirplaneFactory
            + {static} GetAirplaneFactory(): AirplaneFactory
            + CreateAirplane(string[] data): Airplane
        }

        abstract class Airplane {
            - _id: string
            - _name: string
            - _speed: int
            - _maintenanceTime: int
            - _origin: Airport
            - _colour: Colour 
            - _state: IState
            - _available: bool
            + Action(int time): void
        }

        class FightPlane extends Airplane{
            - _chargingTime: int
            - _droppingTime: int
        }
        
        abstract class TransportPlane extends Airplane {
            - _maxCapacity: double
            - _embarkingTime: int
            - _disembarkingTime: int
        }
        
        class PassengerPlane extends TransportPlane {
        }
        
        class MerchandisePlane extends TransportPlane {
        }
        
        class ScoutPlane extends Airplane{
        }
        
        class RescuePlane extends Airplane{
        }
    '}
    
    ' -----------------------------------'
    ' -- Airplane States              -- '
    
/'
    package "Airplane States" {
        interface IState {
            + Action(int time): void
        }
        
        abstract class Flying implements IState {
            - _current: Position
            - _angle: int
            - _destination: Position
        }
        
        abstract Grounded implements IState {
        }
        
        abstract AtAirport extends Grounded {
            - _time: int
            - _capacity : double
            + Action(int time): void
        }
        
        class Embark extends AtAirport {
            + Action(int time): void
        }
        
        class Disembark extends AtAirport {
            + Action(int time): void
        }
        
        class Standby extends Grounded {
            + Action(int time): void
        }
        
        class Maintenance extends Grounded {
            - _maintenanceOver: int
            + Action(int time): void
        }
        
        class Transport extends Flying {
            - _event : EventClient
            - _capacity : double
            + Action(int time): void
        }
        
        class Fight extends Flying {
            - _event : EventFight
            + Action(int time): void
        }
        
        class Rescue extends Flying {
            - _event : EventRescue
            + Action(int time): void
        }
        class Scout extends Flying {
            - _event : EventScout
            + Action(int time): void
            - GeneratePath(Position position): List<Position>
        }
    }
'/
}

package Controllers {
    class Generator << (S,orange) Singleton>> {
        - _form: FormGenerator
        - _generator: Generator
        + GetGenerator(): Generator
        + SelectAirport(): void
        + SelectAirplane(): void
        + AddAirport(string[] data): void
        + EditAirport(string id, string[] data): void
        + DeleteAirport(string id): void
        + AddAirplane(string id, string[] data): void
        + EditAirplane(string id, string[] data): void
        + DeleteAirplane(string id): void
        + Export(): void
        + Import(): void
    }
}

package Views {
    class FormMap {
        - ClickOnMap(): void
        - Select(): void
        - Cancel(): void
    }
    class FormGenerator {
        - _data: string[]
        - _listAirports: string[]
        - _listAirplanes: string[]
        - _selectedAirport: string
        - _selectedAirplane: string
        - AddAirport(): void
        - EditAirport(): void
        - DeleteAirport(): void
        - AddAirplane(): void
        - EditAirplane(): void
        - DeleteAirplane(): void
        - Save(): void
        - Exit(): void
        + UpdateView(string[] data): void
    }
}

' Relations
' - Global
' -- Controller and View
Generator "1" *--> "1" FormGenerator
FormGenerator --> Generator
' -- Controller and Model
Generator "1" *--> "1" Scenario

' - View
FormGenerator "0..1" *--> "1" FormMap

' - Model
' -- Scenario
Scenario "1" *-d-> "N" Airport

' -- Airport
Airport -d-> AirplaneFactory
Airport "1" *--> "N" Airplane

' -- Airplane
AirplaneFactory --> Airplane
Airplane "1" o--> "1" Airport
' Airplane "1" o-u-> "1" IState

@enduml
