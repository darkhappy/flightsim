@startuml

package Models {

    class Scenario {
        - _airports: List<Airport>
        + AddAirport(string[] data): void
        + EditAirport(string id, string[] data): void
        + DeleteAirport(string id): void
        + AddAirplane(string id, string[] data): void
        + EditAirplane(string id, string[] data): void
        + DeleteAirplane(string id): void
        + ToString(): string
    }

    Scenario "1" *--> "N" Airport

    class Airport {
        - _id: string
        - _name: string
        - _location: Position
        - _airplanes: List<Airplane>
        - _passengerTraffic: int
        - _merchandiseTraffic: double
        - _passenger: int
        - _merchandise: double
        + AddAirplane(string[] data): void
        + EditAirplane(string[] data): void
        + DeleteAirplane(): void
        + Export(): string[]
    }
    
    class AirplaneFactory {
        - static _airplaneFactory: AirplaneFactory
        + static GetAirplaneFactory(): AirplaneFactory
        + CreateAirplane(string[] data): Airplane
    }
    
    AirplaneFactory "0..1" *--> "1" AirplaneFactory
    Airport ---> AirplaneFactory
    AirplaneFactory ---> Airplane

    abstract class Airplane {
        - _id: string
        - _name: string
        - _speed: int
        - _maintenanceTime: int
        - _origin: Airport
        - _colour: Colour 
        - _state: IState
    }

    class FirePlane extends Airplane{
        - _chargingTime: int
        - _droppingTime: int
    }
    abstract class TransportPlane extends Airplane {
        - _capacity: double
        - _maxCapacity: double
        - _embarkingTime: int
        - _disembarkingTime: int
    }
    class PassengerPlane extends TransportPlane {}
    class MerchandisePlane extends TransportPlane {}
    class ObserverPlane extends Airplane{}
    class RescuePlane extends Airplane{}

    ' Red = Rescue
    ' Yellow = Fires
    ' Blue = Cargo
    ' Green = Passenger
    ' Gray = Observer
    enum Colour {
        RED
        YELLOW
        BLUE
        GREEN
        GRAY
    }

    class Position {
        - _x: int
        - _y: int
        + Position(int x, int y)
        + Position(string longitude, string latitude)
        + Transpose(int x, int y): string
        + ToString(): string
    }
    
    interface IState {
        + FlyTo(): void
        + Land(): void
        + TakeOff(): void
        + Maintenance(): void
    }
    
    class Flying extends IState {
        - _current: Position
        - _destination: Position
    }
    class Maintenance extends IState {}
    class Standby extends IState {}
    
    Airplane "1" o--> "1" IState
    
    Airport "1" *--> "N" Airplane
    Airplane "1" o--> "1" Airport
}

package Controllers {
    class Generator {
        - _form: FormGenerator
        + AddAirport(string[] data): void
        + EditAirport(string id, string[] data): void
        + DeleteAirport(string id): void
        + AddAirplane(string id, string[] data): void
        + EditAirplane(string id, string[] data): void
        + DeleteAirplane(string id): void
        + Export(): void
        + Import(): void
    }
}

package Views {
    class FormMap {
        - ClickOnMap(): void
        - Select(): void
        - Cancel(): void
    }
    class FormGenerator {
        - _data: string[]
        - _listAirports: string[]
        - _listAirplanes: string[]
        - AddAirport(): void
        - EditAirport(): void
        - DeleteAirport(): void
        - AddAirplane(): void
        - EditAirplane(): void
        - DeleteAirplane(): void
        - Save(): void
        - Exit(): void
        + UpdateView(string[] data): void
    }
}

Generator "1" *--> "n" Scenario
Generator "1" *--> "n" FormGenerator

@enduml