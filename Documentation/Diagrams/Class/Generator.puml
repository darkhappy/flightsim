@startuml Generator

package Models {
    ' ----------------------------------- '
    enum AirplaneType { 
        Fight
        Cargo
        Passenger
        Rescue
        Scout
    }

    class Position {
        - _x: int
        - _y: int
        + Position(int x, int y)
        + {static} Transpose(int x, int y): string
        + ToString(): string
    }

    class Scenario {
        + Airports {get; set;}: List<airport>
        + ExtensionData { get; set;}: ExtemtionDataObject

        + AddAirplane(string airplaneId, AirplaneInfo info): void
        + AddAirport(AirplaneInfo info): void
        + DeleteAirplane(string id): void
        + DeleteAirport(string id): void
        + EditAirplane(string airportId, AirplaneInfo info): void
        + EditAirport(string airportId, AirplaneInfo info): void
        + GetAirplanesInfo(string airportId): List<AirplaneInfo>
        - GetAirport(string airportCode): Airport
        + GetAirportsInfo(): List<AirportInfo>
        + GetAirportWithPlane(string airplaneCode): Airport
        + HasAirplane(string airplaneId): bool
        + HasAirport(string airportCode): bool
    }
    
    ' -----------------------------------'
    ' -- Airport Management           -- '
    'package "Airplanes and Airports" {
    class Airport {
        + Id {get; set;}: string
        + Name {get; set;}: string
        + Position {get; set;}: Position
        + Airplanes {get; set;}: List<Airplane>
        + PassengerTraffic {get; set;}: int
        + CargoTraffic {get; set;}: double
        + ExtensionData {get; set;}: ExtensionDataObject

        + AddAirplane(AirplaneIndo data): void
        + DeleteAirplane(string id): void
        + EditAirplane(string id, AirplaneIndo data): void
        + FindAirplane(string id): void
        + GetAirplanesInfo(): List<AirplaneInfo>
        + HasPlane(string airplaneCode): bool       
        + ToAirportInfo(): AirportInfo
    }
    
    ' -----------------------------------'
    ' -- Airplane Management          -- '
    class AirplaneFactory << (S,orange) Singleton>> {
        - {static} _instance: AirplaneFactory
        + {static} Instance { get;}: AirplaneFactory
        + CreateAirplane(AirplaneInfo data): Airplane
    }

    abstract class Airplane {
        + Id { get; set;}: string
        + Name { get; set;}: string
        + Speed { get; set;}: int
        + MaintenanceTime{ get; set;}: int
        + ExtensionData { get; set;}: ExtensionDataObject
        + Type { get;}: AirplaneType
    
        + Edit(AirplaneInfo info): void
        - GetDerivedTypes(): Type[]
        + ToAirplaneInfo(): AirplaneInfo
    }

    class FightPlane extends Airplane{
        + Type { get;}: AirplaneType
    }
    
    abstract class TransportPlane extends Airplane {
        + MaxCapacity { get; set;}: int
        + EmbarkingTime { get; set;}: int
        + DisembarkingTime{ get; set;}: double

        Edit(AirplaneInfo data): void
        ToAirplaneInfo(): AirplaneInfo
    }
    
    class PassengerPlane extends TransportPlane {
        + Type { get;}: AirplaneType
    }
    
    class MerchandisePlane extends TransportPlane {
        + Type { get;}: AirplaneType
    }
    
    class ScoutPlane extends Airplane{
        + Type { get;}: AirplaneType
    }
    
    class RescuePlane extends Airplane{
        + Type { get;}: AirplaneType
    }
    
    
    package Informations {
        ' -----------------------------------'
        ' -- Object Info Management       -- '
        
        
note top of ObjectInfo
    AirportInfo and AirplaneInfo is passed between the view and the model. 
    As there would have been way too many lines, only the direct implemenations
    are shown.
end note 

        abstract class ObjectInfo {
            + Id { get; set;}: string
            + Name { get; set;}: string

            + Equals(object obj): bool
            # Equals(ObjectInfo obj): bool
            + GetHashCode(): int
            + operator != (ObjectInfo left, ObjectInfo right): bool
            + operator == (ObjectInfo left, ObjectInfo right): bool
        }

        class AirportInfo extends ObjectInfo {
            + Position { get; set;}: Position
            + PassengerTraffic { get; set;}: int
            + CargoTraffic { get; set;}: double

            # Equals(AirportInfo other): bool
            + Equals(object obj): bool
            + GetHashCode(): int
            + operator != (AirportInfo left, AirportInfo right): bool
            + operator == (AirportInfo left, AirportInfo right): bool
        }

        class AirplaneInfo extends ObjectInfo {
            - _maintenanceTime: int
            - _speed: int
            + Type { get;}: AirplaneType
            + Speed { get; set;}: int
            + MaintenanceTime{ get; set;}: int
            + EmbarkingTime { get; set;}: int
            + DisembarkingTime{ get; set;}: double
            + MaxCapacity { get; set;}: int

            # Equals(AirplaneInfo other): boolean
            + Equals(object obj): bool
            + GetHashCode(): int
            + operator != (AirplaneInfo left, AirplaneInfo right): bool
            + operator == (AirplaneInfo left, AirplaneInfo right): bool
        }

        class TransportInfo extends AirplaneInfo {
            - _disembarkingTime: int
            - _embarkingTime: int
            - _maxCapacity: double
            + DisembarkingTime{ get; set;}: int
            + EmbarkingTime { get; set;}: int
            + MaxCapacity { get; set;}: double

            - Equals(object obj): bool
            # Equals(TransportInfo other): boolean
            + GetHashCode(): int
            + operator != (TransportInfo left, TransportInfo right): bool
            + operator == (TransportInfo left, TransportInfo right): bool

        }
    }
}


package Controllers {
    class Generator << (S,orange) Singleton>> {
        - _frmGen: FormGenerator
        - _instance: Generator
        - _Scenario: Scenario
        + MapHeight: int
        + MapWidth: int
        + Instance { get;}: Generator

        + AddAirplane(string airportId, AirplaneInfo info): void
        + AddAirport(AirportInfo info): void
        + CanSerialize(): bool
        + DeleteAirplane(string id): void
        + DeleteAirport(string id): void
        + EditAirplane(string airportId, string airplaneId, AirplaneInfo info): void
        + EditAirport(string id, AirportInfo data): void
        + Export(string Path): void
        - GenerateView(): void
        + GetrAirportPosition(string text): Position
        + Import(string path): void
        + Main(string[] args): void	
        + UpdateAirplanes(string id): void
    }
}

package Views {
    class FormMap {
        + Pos {get; set;}: Position
        
        + DrawMapPos(): void
        - mapPanelPos_CLick(object sender, EventArgs e): void
        - mapPanelPos_Paint(object sender, PaintEventArgs e): void
    }
    class FormGenerator {
        - _mapPos: FormMap
        - _player: SoundPlayer
        - _selectedPosition: Position
        - currentPath: string

        - btnAddAirplane_Click(object sender, EventArgs e): void
        - btnAddAirport_Click(object sender, EventArgs e): void
        - btnDeleteAirplane_Click(object sender, EventArgs e): void
        - btnDeleteAirport_Click(object sender, EventArgs e): void
        - btnEditAirplane_Click(object sender, EventArgs e): void
        - btnEditAirport_Click(object sender, EventArgs e): void
        - cmbType_SelectedIndexChanged(object sender, EventArgs e): void
        + EnableGroups(bool enabled): void
        - FormGenerator_Load(object sender, EventArgs e): void
        - GetAirplaneInfo(AirplaneType): void
        - GetAirplaneType(string type): AirplaneType
        - InitializeComponent(): void
        - IsAirplaneValid(): bool
        - listAirplanes_SelectedIndexChanged(object sender, EventArgs e): void
        - listAirports_SelectedIndexChanged(object sender, EventArgs e): void
        + OpenPath(): string
        - ResetAirplaneInfo(): void
        - ResetAirportInfo(): void
        + ResetPath(): void
        + SavePath(): string
        + SetPath(string path): void
        - subToolClose_Click(object sender, EventArgs e): void
        - subToolOpen_Click(object sender, EventArgs e): void
        - subToolSave_Click(object sender, EventArgs e): void
        - subToolSaveAs_Click(object sender, EventArgs e): void
        - subToolNew_Click(object sender, EventArgs e): void
        - subToolStop_Click(object sender, EventArgs e): void
        - subToolStart_Click(object sender, EventArgs e): void
        - txbPosition_Click(object sender, EventArgs e): void
        + UpdateAirplanes(List<AirplaneInfo> airplanes): void
        + UpdateAirports(List<AirportInfo> airports): void
    }
}

' Relations
' - Global
' -- Controller and View
Generator "1" *--> "1" FormGenerator
FormGenerator --> Generator
' -- Controller and Model
Generator "1" *--> "1" Scenario

Generator "1" *--> "1" Generator

' - View
FormGenerator "0..1" *--> "1" FormMap

' - Model
' -- Scenario
Scenario "1" *-d-> "N" Airport

' -- Airport
Airport -d-> AirplaneFactory
Airport "1" *--> "N" Airplane

' -- Airplane
AirplaneFactory --> Airplane
Airplane "1" o--> "1" Airport
' Airplane "1" o-u-> "1" IState

Airport -> AirportInfo
Airplane -> AirplaneInfo
TransportPlane --> TransportInfo
AirportInfo -[hidden]d-> AirplaneInfo

FormGenerator --> AirportInfo
FormGenerator --> AirplaneInfo



@enduml
