@startuml

skinparam linetype polyline

package Models {
    ' ----------------------------------- '
    ' -- Enum                          -- '
    ' Red = Rescue
    ' Yellow = Fires
    ' Blue = Cargo
    ' Green = Passenger
    ' Gray = Observer
    enum Colour {
        RED
        YELLOW
        BLUE
        GREEN
        GRAY
    }
    
    enum AirplaneType {
        PASSENGER
        CARGO
        FIRE
        RESCUE
        SCOUT
    }

    class Position {
        - _x: int
        - _y: int
        + Position(int x, int y)
        + Position(string longitude, string latitude)
        + {static} Transpose(int x, int y): string
        + {static} Transpose(string): Tuple<int, int>
        + ToString(): string
    }

    class Scenario << (S, Orange) Singleton >> {
        - _airports: List<Airport>
        - _events: List<Event>
        - {static} _scenario: Scenario
        + {static} GetScenario(): Scenario
        + GenerateEvents(): void
        + HandleTick(int time): void
        + RemoveEvent(Event e): void
        + GetNearestAirport(Position position): Airport
    }
    
    ' -----------------------------------'
    ' -- Airport Management           -- '
    package "Airplanes and Airports" {
        class Airport {
            - _id: string
            - _name: string
            - _location: Position
            - _airplanes: List<Airplane>
            - _passengerTraffic: int
            - _merchandiseTraffic: double
            - _passenger: int
            - _merchandise: double
            + Export(): string[]
            + Action(int time): void
        }
    
    ' -----------------------------------'
    ' -- Airplane Management          -- '
        class AirplaneFactory << (S,orange) Singleton>> {
            - {static} _airplaneFactory: AirplaneFactory
            + {static} GetAirplaneFactory(): AirplaneFactory
            + CreateAirplane(string[] data): Airplane
        }

        abstract class Airplane {
            - _id: string
            - _name: string
            - _speed: int
            - _maintenanceTime: int
            - _origin: Airport
            - _colour: Colour 
            - _state: IState
            + Action(int time): void
        }

        class FightPlane extends Airplane{
            - _chargingTime: int
            - _droppingTime: int
        }
        
        abstract class TransportPlane extends Airplane {
            - _maxCapacity: double
            - _embarkingTime: int
            - _disembarkingTime: int
        }
        
        class PassengerPlane extends TransportPlane {
        }
        
        class MerchandisePlane extends TransportPlane {
        }
        
        class ScoutPlane extends Airplane{
        }
        
        class RescuePlane extends Airplane{
        }
        }
    
    ' -----------------------------------'
    ' -- Airplane States              -- '
    
    package "Airplane States" {
        interface IState {
            + Action(int time): void
        }
        
        abstract class Flying implements IState {
            - _current: Position
            - _angle: int
            - _destination: Position
        }
        
        abstract Grounded implements IState {
        }
        
        abstract AtAirport extends Grounded {
            - _time: int
            - _capacity : double
            + Action(int time): void
        }
        
        class Embark extends AtAirport {
            + Action(int time): void
        }
        
        class Disembark extends AtAirport {
            + Action(int time): void
        }
        
        class Standby extends Grounded {
            + Action(int time): void
        }
        
        class Maintenance extends Grounded {
            - _maintenanceOver: int
            + Action(int time): void
        }
        
        class Transport extends Flying {
            - _event : EventClient
            - _capacity : double
            + Action(int time): void
        }
        
        class Fight extends Flying {
            - _event : EventFight
            + Action(int time): void
        }
        
        class Rescue extends Flying {
            - _event : EventRescue
            + Action(int time): void
        }
        class Scout extends Flying {
            - _event : EventScout
            + Action(int time): void
            - GeneratePath(Position position): List<Position>
        }
    }
    
    ' ---------------------------------- '
    ' -- Events Management            -- '
    package Event {
        class EventFactory << (S,orange) Singleton>> {
            - {static} _eventFactory: EventFactory
            + {static} GetEventFactory(): EventFactory
            + GenerateFight(): EventFight
            + GenerateRescue(): EventRescue
            + GeneratePassengers(): ClientPassenger
            + GenerateMerchandise(): ClientMerchandise
            + GenerateScout(): EventScout
        }

        abstract class Event {
            - _location : Position
            + HandleEvent(): void
            + ToString() : string
        }

        abstract class EventClient extends Event {
            - _destination : Airport
        }

        together {
            class ClientPassenger extends EventClient {
                - _count: int
            }

            class ClientMerchandise extends EventClient {
                - _count: double
            }
        }

        class EventRescue extends Event {
        }

        class EventScout extends Event {
        }

        class EventFight extends Event {
            - _force: int
        }
    }
}

package Controllers {
    class Simulator << (S,orange) Singleton>> {
        - _simulator: Simulator
        - _scenario: Scenario
        - _view : FormMap
        + GetSimulator(): void
        - OnTick(int time): void
    }
}

package Views {
    class FormMap {
    }
}

' Relations
' - Global
' -- Controller and View
Simulator "1" *--> "1" FormMap
FormMap --> Simulator
' -- Controller and Model
Simulator "1" *--> "1" Scenario
Simulator "1" *--> "1" Simulator

' - Model
' -- Scenario
Scenario -d-> EventFactory
Scenario "1" *-d-> "N" Event
Scenario "1" *-d-> "N" Airport

' -- Airport
Airport -d-> AirplaneFactory
Airport "1" *--> "N" Airplane

' -- Airplane
AirplaneFactory --> Airplane
Airplane "1" o--> "1" IState
Airplane "1" o--> "1" Airport

' -- States
Transport -[hidden]d- Flying
Scout -[hidden]d- Flying
Fight -[hidden]d- Flying
Rescue -[hidden]d- Flying

Transport -[hidden]r- Fight
Fight -[hidden]r- Rescue
Rescue -[hidden]r- Scout

' -- Events
EventFactory --> Event
' Event --> Scenario (commented since it messed up the diagram)

EventClient "1" o-r-> "1" Airport
EventClient -[hidden]l- EventFight
EventFight -[hidden]l- EventRescue
EventRescue -[hidden]l- EventScout
ClientMerchandise -[hidden]u- ClientPassenger
   
' -- Events and State
Transport "1" o-u--> "1" EventClient
Fight "1" o-u--> "1" EventFight
Rescue "1" o-u--> "1" EventRescue
Scout "1" o-u--> "1" EventScout

@enduml