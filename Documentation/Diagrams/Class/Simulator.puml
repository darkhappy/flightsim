@startuml


package Models {
    ' ----------------------------------- '
    ' -- Enum                          -- '
    ' Yellow = Fires
    ' Blue = Cargo
    ' Green = Passenger
    ' Gray = Observer
    enum Colour {
        RED
        YELLOW
        BLUE
        GREEN
        GRAY
    }
    
    enum AirplaneType {
        PASSENGER
        CARGO
        FIRE
        RESCUE
        SCOUT
    }

    class Position {
        - _x: int
        - _y: int
        + Position(int x, int y)
        + Position(string longitude, string latitude)
        + {static} Transpose(int x, int y): string
        + {static} Transpose(string): Tuple<int, int>
        + ToString(): string
    }

    class Scenario {
        - _airports: AirportList
        - _events: EventList
        + Action(int time): void
    }
    
    ' -----------------------------------'
    ' -- Airport Management           -- '
    class Airport {
        - _id: string
        - _name: string
        - _location: Position
        - _airplanes: AirplaneList
        - _passengerTraffic: int
        - _merchandiseTraffic: double
        - _passenger: int
        - _merchandise: double
        + Export(): string[]
    }
    
    ' -----------------------------------'
    ' -- Airplane Management          -- '
    package Airplane {
        class AirplaneFactory << (S,orange) Singleton>> {
            - {static} _airplaneFactory: AirplaneFactory
            + {static} GetAirplaneFactory(): AirplaneFactory
            + CreateAirplane(string[] data): Airplane
        }

        abstract class Airplane {
            - _id: string
            - _name: string
            - _speed: int
            - _maintenanceTime: int
            - _origin: Airport
            - _colour: Colour 
            - _state: IState
            - _available: bool
        }

        class FirePlane extends Airplane{
            - _chargingTime: int
            - _droppingTime: int
        }
        
        abstract class TransportPlane extends Airplane {
            - _capacity: double
            - _maxCapacity: double
            - _embarkingTime: int
            - _disembarkingTime: int
        }
        
        class PassengerPlane extends TransportPlane {
        }
        
        class MerchandisePlane extends TransportPlane {
        }
        
        class ObserverPlane extends Airplane{
        }
        
        class RescuePlane extends Airplane{
        }
    }
    
    ' -----------------------------------'
    ' -- Airplane States              -- '
    
    package State {
        interface IState {
            + FlyTo(Position position): void
        }
        
        abstract class Flying implements IState {
            - _current: Position
            - _angle: int
            - _destination: Position
        }
        
        abstract Grounded implements IState {
        }
        
        class Embark extends Grounded {
            - _time: int
            + Action(int time): void
        }
        
        class Disembark extends Grounded {
            - _time: int
            + Action(int time): void
        }
        
        class Standby extends Grounded {
            + Action(int time): void
        }
        
        class Maintenance extends Grounded {
            - _maintenanceOver: int
            + Action(int time): void
        }
        
        class Rescue extends Flying {
            + Action(int time): void
        }
        
        class Fight extends Flying {
            + Action(int time): void
        }
        
        class Transport extends Flying {
            + Action(int time): void
        }
        
        class Scout extends Flying {
            + Action(int time): void
            - GeneratePath(Position position): List<Position>
        }
    }
    
    ' ---------------------------------- '
    ' -- Events Management            -- '
    package Event {
        class EventFactory << (S,orange) Singleton>> {
            - _eventFactory: EventFactory
            + GenerateFire(): Fire
            + GenerateRescue(): Rescue
            + GeneratePassengers(): Passenger
            + GenerateMerchandise(): Merchandise
            + GenerateObservation(): Observation
        }

        abstract class Event {
            - _location : Position
            + ToString() : string
        }

        abstract class EventTransport extends Event {
            - _destination : Airport
        }

        class Passenger extends EventTransport {
            - _count: int
        }

        class Merchandise extends EventTransport {
            - _count: double
        }

        class EventRescue extends Event {
        }

        class EventScout extends Event {
        }

        class EventFight extends Event {
            - _force: int
        }
    }
}

package Controllers {
    class Simulator << (S,orange) Singleton>> {
        - _simulator: Simulator
        - _scenario: Scenario
        - _view : FormMap
        + GetSimulator(): void
        - OnTick(int time): void
    }
}

package Views {
    class FormMap {
    }
}

' Relations
' - Global
' -- Controller and View
Simulator "1" *--> "1" FormMap
FormMap --> Simulator
' -- Controller and Model
Simulator "1" *--> "1" Scenario
Simulator "1" *--> "1" Simulator

' - Model
' -- Scenario
Scenario -d-> EventFactory
Scenario "1" *-d-> "N" Event
Scenario "1" *-l-> "N" Airport

' -- Airport
Airport -d-> AirplaneFactory
Airport "1" *-l-> "N" Airplane

' -- Airplane
AirplaneFactory -d-> Airplane
Airplane "1" o--> "1" IState
Airplane "1" o-u-> "1" Airport

' -- States
Fight -[hidden]- Rescue
Rescue -[hidden]- Scout
Scout -[hidden]- Transport
Transport -[hidden]- Maintenance
Maintenance -[hidden]- Embark
Embark -[hidden]- Disembark
Disembark -[hidden]- Standby

' -- Events
EventFactory -d-> Event
EventFight -[hidden]- EventRescue
EventRescue -[hidden]- EventScout
EventScout -[hidden]- EventTransport
   
' -- Events and State
Fight "1" o-d-> "1" EventFight
Scout "1" o-d-> "1" EventScout
Rescue "1" o-d-> "1" EventRescue
Transport "1" o-d-> "1" EventTransport

@enduml