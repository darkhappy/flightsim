@startuml


package Models {
    ' ----------------------------------- '
    ' -- Enum                          -- '
    ' Red = Rescue
    ' Yellow = Fires
    ' Blue = Cargo
    ' Green = Passenger
    ' Gray = Observer
    enum Colour {
        RED
        YELLOW
        BLUE
        GREEN
        GRAY
    }
    
    enum AirplaneType {
        PASSENGER
        CARGO
        FIRE
        RESCUE
        SCOUT
    }

    class Position {
        - _x: int
        - _y: int
        + Position(int x, int y)
        + Position(string longitude, string latitude)
        + {static} Transpose(int x, int y): string
        + {static} Transpose(string): Tuple<int, int>
        + ToString(): string
    }

    class Scenario << (S, Orange) Singleton >> {
        - _airports: List<Airport>
        - _events: List<Event>
        - _unassignedEvents: List<Event>
        - {static} _scenario: Scenario
        + {static} GetScenario(): Scenario
        + GenerateEvents(): void
        + HandleTick(double time): void
        + RemoveEvent(Event e): void
        + GetNearestAirports(Position position): List<Airport>
    }
    
    ' -----------------------------------'
    ' -- Airport Management           -- '
    package "Airplanes and Airports" {
        class Airport {
            - _id: string
            - _name: string
            - _location: Position
            - _airplanes: List<Airplane>
            - _passengerTraffic: int
            - _merchandiseTraffic: double
            - _clients : List<EventClient>
            + Export(): string[]
            + Action(double time): double
            + AssignJob(Event e): bool
        }
    
        abstract class Airplane {
            - _id: string
            - _name: string
            - _speed: int
            - _maintenanceTime: int
            - _origin: Airport
            - _colour: Colour 
            - _state: IState
            + Action(double time): double
            + AssignJob(Event e): bool
            + ChangeState(): void
        }

        class FightPlane extends Airplane{
            + AssignJob(Event e): bool
        }
        
        abstract class TransportPlane extends Airplane {
            - _maxCapacity: double
            - _embarkingTime: int
            - _disembarkingTime: int
            + AssignJob(Event e): bool
        }
        
        class PassengerPlane extends TransportPlane {
        }
        
        class MerchandisePlane extends TransportPlane {
        }
        
        class ScoutPlane extends Airplane{
            + AssignJob(Event e): bool
        }
        
        class RescuePlane extends Airplane{
            + AssignJob(Event e): bool
        }
    }
    
    ' -----------------------------------'
    ' -- Airplane States              -- '
    
    package "Airplane States" {
        interface IState {
            + Action(double time): double
        }
        
        abstract class Flying extends IState {
            - _event: Event
            - _current: Position
            - _destination: Position
            - CalculateDistance(Position current, Position destination): Position
            + Action(double time): double
        }
        
        class Standby implements IState {
            + Action(double time): double
        }
        
        abstract class TimedState extends IState {
            - _time: int
            + Action(double time): double
        }
        
        class Maintenance extends TimedState {
        }
        
        class Embark extends TimedState {
        }
        
        class Disembark extends TimedState {
        }
        
        class Transport extends Flying {
            - _capacity : double
            + Action(double time): double
        }
        
        class Fight extends Flying {
            + Action(double time): double
        }
        
        class Rescue extends Flying {
            + Action(double time): double
        }
        
        class Scout extends Flying {
            + Action(double time): double
        }
    }
    
    ' ---------------------------------- '
    ' -- Events Management            -- '
    package Event {
        class EventFactory << (S,orange) Singleton>> {
            - {static} _instance: EventFactory
            + {static} GetInstance(): EventFactory
            + GenerateFight(): EventFight
            + GenerateRescue(): EventRescue
            + GeneratePassengers(): ClientPassenger
            + GenerateMerchandise(): ClientMerchandise
            + GenerateScout(): EventScout
        }

        abstract class Event {
            - _location : Position
            + ToString() : string
            + HandleEvent() : void
        }

        abstract class EventClient extends Event {
            - _destination : Airport
        }

        together {
            class ClientPassenger extends EventClient {
                - _count: int
            }

            class ClientMerchandise extends EventClient {
                - _count: double
            }
        }

        class EventRescue extends Event {
        }

        class EventScout extends Event {
        }

        class EventFight extends Event {
            - _force: int
        }
    }
}

package Controllers {
    class Simulator << (S,orange) Singleton>> {
        - _simulator: Simulator
        - _scenario: Scenario
        - _view : FormMap
        + GetSimulator(): void
        - OnTick(double time): void
    }
}

package Views {
    class FormMap {
    }
}

' Relations
' - Global
' -- Controller and View
Simulator "1" *--> "1" FormMap
FormMap --> Simulator
' -- Controller and Model
Simulator "1" *--> "1" Scenario
Simulator "1" *--> "1" Simulator

' - Model
' -- Scenario
Scenario -d-> EventFactory
Scenario "1" *--> "1" Scenario
Scenario "1" *-d-> "N" Event
Scenario "1" *-l-> "N" Airport

' -- Airport
Airport "1" *--> "N" Airplane
Airport "1" o--> "N" EventClient

' -- Airplane
Airplane "1" o-d-> "1" IState
Airplane "1" o--> "1" Airport

' -- States
Flying "1" o--> "1" Event

' -- Events
EventFactory --> Event
EventFactory "1" *--> "1" EventFactory

EventClient "1" *--> "1" Airport
Event <.. Airport
Event <.. Airplane
   
@enduml