@startuml


package Models {
    ' ----------------------------------- '
    ' -- Enum                          -- '
    ' Red = Rescue
    ' Yellow = Fires
    ' Blue = Cargo
    ' Green = Passenger
    ' Gray = Observer
    enum Colour {
        RED
        YELLOW
        BLUE
        GREEN
        GRAY
    }

    class Position {
        - Random : Random
        - Hidden { get; } : bool
        - X { get; set; }: int
        - Y { get; set;}: int
        + DistanceTo(Position target) : double
        + Equals(object obj) : bool
        + GetHashCode() : int
        + GetRandomPosition() : Position
        + Position(int x, int y)
        + operator !=(Position left, Position right) : bool
        + operator ==(Position left, Position right) : bool
        + Position(int x, int y)
        + {static} Transpose(int x, int y): string
        + ToString(): string
    }

    class Scenario << (S, Orange) Singleton >> {
        - {static} _scenario : Scenario
        - Airports {get; set;} : List<Airport>
        - ExtentionData { get; set; } : ExtentionDataObject
        - Instance { get; set; } : Scenario
        - Tasks { get; set; } : List<Task>
        - UnassignedTasks { get; set; } : List<Task>
        + AddTask(Task task, [bool addToUnassigned = false]) : void
        + AssignUnassignedTasks() : void
        + GenerateTasks(): void
        + GetAirplanesFromAirport(strin id) : List<string>
        + GetAirport(string airportCode) : Airport
        + GetAirportsObjectInfo() : List<ObjectInfo>
        + GetClients(string id) : List<string>
        + GetEvents() : List<Tuple<TaskType, Position>>
        + GetFlyingAirplane() : List<Tuple<string, taskType, Position, Position, Position>>
        + GetNearestAirports(Position position) : List<Airport>
        + GetTwoUniqueAirports() : Tuple<Airport, Airport>
        + HandleTick(double time): void
        + {static} OnDeserialized(StreamingContext context) : void
        + RemoveTask(Task task): void
        + Senario()
    }
    
    ' -----------------------------------'
    ' -- Airport Management           -- '
    package "Airplanes and Airports" {
        class Airport {
            - Airplanes { get; set; } : List<Airplane>
            - CargoTraffic { get; set; } : double
            - Clients { get; set; } : List<TaskTransport>
            - ExtentionData { get; set; } : ExtentionDataObject
            - Id { get; set; } : string
            - Name { get; set; } : string
            - PassengerTraffic { get; set; } : int
            - Position { get; set; } : Position
            + Action(double time): void
            + AddClient(TaskTransport task) : void
            + AssignTask(Task task): bool
            + GetClient() : List<string>
            + GetFlyingAirplanes() : IEnumerable<Tuple<string, TaskType, Position, Position, Position>>
            + GetToStringOfPlanes() : List<string>
            + OnDeserialized(StreamingContext context) : void
            + SplitClient(TaskTransport client, double remainder) : void
            + TransferTo(Airport destination, Airplane airplane) : void
        }
    
        abstract class Airplane {
            - Destination { get; } : Position
            - Id { get; set; } : string
            - MaintenanceTime { get; set; } : int
            - Name { get; set; } : string
            - Origin { get; set; } : Airport
            - OriginePosition { get; } : Position
            - Position { get; } : Position
            - Speed { get; set; } : int
            - State  { get; set; } : IState
            - Type { get; } : TaskType
            + Action(double time): double
            # Airplane(string id, string name, int speed, int maintenanceTime, Airport origin)
            + AssignTask(Task task) : bool
            # CanDoTask(Task task) : bool
            - GetDerivedTypes() : Type[]
            - OnDeserialized(StreamingContext context) : void
            + ToString() : string
            + TransferTo(Airport  destination) : void
        }

        class FightPlane extends Airplane{
            - Type { get; set; } : TaskType
            # CanDoTask(Task task): bool
            + FightPlane(string id, string name, int speed, int maintenanceTime, Airport origin): void
        }
        
        abstract class TransportPlane extends Airplane {
            - DisembarkingTime { get; set; } : int
            - EmbarkingTime { get; set; } : int
            - MaxCapacity { get; set; } : double
            # LoadClient(TaskTransport task) : void
            # TransportPlane(string id, string name, int speed, int maintenanceTime, Airport origin, double maxCapacity, int embarkingTime, int disembarkingTime)
        }
        
        class PassengerPlane extends TransportPlane {
            - Type { get; } : TaskType
            # CanDoTask(Task task) : bool
            + TransportPlane(string id, string name, int speed, int maintenanceTime, Airport origin, double maxCapacity, int embarkingTime, int disembarkingTime)
        }
        
        class CargoPlane extends TransportPlane {
            - Type { get; } : TaskType
            # CanDoTask(Task task) : bool
            + CargoPlane(string id, string name, int speed, int maintenanceTime, Airport origin, double maxCapacity, int embarkingTime, int disembarkingTime)
        }
        
        class ScoutPlane extends Airplane{
            - Type { get; } : TaskType
            # CanDoTask(Task task): bool
            + ScoutPlane(string id, string name, int speed, int maintenanceTime, Airport origin)
        }
        
        class RescuePlane extends Airplane{
            - Type { get; } : TaskType
            # CanDoTask(Task task): bool
            + RescuePlane(string id, string name, int speed, int maintenanceTime, Airport origin)
        }
    }
    
    ' -----------------------------------'
    ' -- Airplane States              -- '
    
    package "Airplane States" {
        interface IState {
            - Current { get; } : Position
            - Destination { get; } : Position
            + Action(double time): void
            + ToString(): string
        }
        
        abstract class PlaneState implements IState {
            - Plane { get; }: Airplane
            - Current { get; } : Position
            - Destination { get; } : Position
            + Action(double time): void
            # OnArrived(double overlap) : void
            # PlaneState(Aiplane plane)
            + ToString(): string
        }
        
        abstract class FlyingState extends PlaneState implements ITaskState {
            - _current: Position
            - _destination: Position
            - Current { get; } : Position
            - Destination { get; } : Position
            - Task { get; } : Task
            + Action(double time): double
            + CalculateDistance(double time): Tuple<Position, double>
            # FlyingState(Airplane plane, Task task)
            # HeadBack(double overlap) : void
            # SetDestination(Position destination) : void
            # SetPosition(Position current) : void
        }
        
        class StandbyState implements IState {
            - Current { get; } : Position
            - Destination { get; } : Position
            + Action(double time): void
            + ToString() : string
        }
        
        abstract TimedState extends PlaneState{
            - Current { get; } : Position
            - Destination { get; } : Position
            # TimeLeft { get; set; } : double
            + Action(double time): void
            # TimedState(Airplane plane)
        }
        
        class MaintenanceState extends TimedState {
            + MaintenanceState(Airplane plane)
            # OnArrived(double overlap) : void
            + ToString() : string
        }
        
        abstract class TimedStateWithTask extends TimedState implements ITaskState {
            # Task { get; } : Task
            # TimedStateWithTask(Airplane plane, Task task)
        }
        
        class EmbarkState extends TimedStateWithTask {
            - _plane : TransportPlane
            - _task : TaskTransport
            + EmbarkState(TransportPlane plae, TaskTransport task)
            # OnArrived(double overlap) : void
            + ToString() : string
        }
        
        class DisembarkState extends TimedStateWithTask {
            + DisembarkState(TransportPlane plane, TaskTransport task)
            # OnArrived(double overlap) : void
            + ToString() : string
        }
        
        class TransportFlight extends FlyingState {
            - _plane : TransportPlane
            - _task : TaskTransport            
            - Task { get; } : Task
            # OnArrived(double overlap) : void
            + ToString() : string
            + TransportFlight(TransportPlane plane, TaskTransport task)
        }
        
        class FightingFlight extends FlyingState {
            # OnArrived(double overlap) : void
            + ToString() : string
            + FightingFlight(Airplane plane, Task task)
        }
        
        class RescueFlight extends FlyingState {
            # OnArrived(double overlap) : void
            + ToString() : string
            + RescueFlight(Airplane plane, Task task)
        }
        
        class ScoutFlight extends FlyingState {
            - _circling : bool
            - Radius : int
            - CirclingPosition { get; } : Position
            + Action(double time): void
            + CalculateDistance(double time) : Tuple<Position, double>
            - CalculateCircle(int radius, double time) : Tuple<Position, double>
            # OnArrived(double overlap) : void
            + ScoutFlight(Airplane plane, Task task)
            ToString() : string
        }
    }
    
    ' ---------------------------------- '
    ' -- Tasks Management            -- '
    package Task {
        class TaskFactory << (S,orange) Singleton>> {
            - {static} _instance: TaskFactory
            + {static} Instance { get; } : TaskFactory
            + CreateCargoTask(Airport airport): ClientCargo
            + GenerateRescue(): TaskRescue
            + CreateFightTask(): TaskFight
            + CreatePassengerTask(Airport airport): ClientPassenger
            + CreateRescueTask(): TaskRescue
            + CreateScoutTask(): TaskScout
        }

        abstract class Task {
            - IsCompleted { get; set; } : bool
            - IsTransportTask { get; } : bool
            - Position { get; } : Position
            - Type { get; } : TaskType
            + HandleEvent() : void
            # Task(Position position)
        }

        abstract class TaskTransport extends Task {
            - _amount : double
            - Amount { get; set; } : double
            - Destination { get; } : Airport
            - IsTransportTask { get; } : bool
            + Merge(TaskTransport other) : bool
            + Split(double remainder) : TaskTransport
            # TaskTransport(Airport destination)
        }

        together {
            class ClientPassenger extends TaskTransport {
                - Type { get; } : TaskType
                + ClientPassenger(Airport airport)
                + ToString() : string
            }

            class ClientCargo extends TaskTransport {
                - Type { get; } : TaskType
                + ClientCargo(Airport airport)
                + ToString() : string
            }
        }

        class TaskRescue extends Task {
            - Type { get; } : TaskType
            + TaskRescue(Position position)
            + ToString() : string
        }

        class TaskScout extends Task {
            - Type { get; } : TaskType
            + TaskScout(Position position)
            + ToString() : string
        }

        class TaskFight extends Task {
            -Health { get; set; } : int
            - Type { get; } : TaskType
            + TaskFight(Position position)
            + ToString() : string
        }
    }
}

package Controllers {
    class Simulator << (S,orange) Singleton>> {
        - _instance : Simulator
        - _simView : FormSimulator
        - _scenario: Scenario
        + {static} Instance { get; } : Simulator 
        + {static} Main(): void
        + LoadScenario(): void
        + OnTick(double time): void
    }
}

package Views {
    class FormSimulator {
        - _bitmap : Bitmap
        - _graphics : Grafics
        - _player : SoundPlayer
        - _ticks : int
        - checkMute_CheckedChanged() : void
        + DrawAirplane() : void
        + DrawEvent() : void
        + DrawMap() : Void
        + DrawAll() : void
        + FormSimulator()
        + FormSimulator_Load() : void
        + listAirport_SelectedIndex() : void
        + loadScenario() : void
        + Path() : string
        + pause() : void
        + Rotate() : Bitmap
        + pauseSim_Click() : void
        + startSim_Click() : void
        + timer_Tick() : void
        + UpdateClients(string id) : void
    }
}

' Relations
' - Global
' -- Controller and View
Simulator "1" *-u-> "1" FormMap
FormMap -d-> Simulator
' -- Controller and Model
Simulator "1" *--> "1" Scenario
Simulator "1" *-> "1" Simulator

' - Model
' -- Scenario
Scenario -d-> TaskFactory
Scenario "1" *--> "1" Scenario
Scenario "1" *-d-> "N" Task
Scenario "1" *-l-> "N" Airport

' -- Airport
Airport "1" *--> "N" Airplane
Airport "1" o-> "N" TaskTransport

' -- Airplane
Airplane "1" o---d-> "1" IState
Airplane "1" o--> "1" Airport

' -- Tasks
TaskFactory --> Task
TaskFactory "1" *--> "1" TaskFactory
ITaskState "1" o--> "1" Task

TaskTransport "1" o-> "1" Airport
Task <.. Airport
Task <.. Airplane
Task -u-> Scenario
   
@enduml